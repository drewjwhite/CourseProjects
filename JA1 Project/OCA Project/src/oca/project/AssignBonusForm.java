package oca.project;

import java.util.ArrayList;



/**
 *
 * Form that allows managers assign bonuses to their subordinates 
 */
public class AssignBonusForm extends javax.swing.JFrame {
 
    private ArrayList<Person> assignBonusFormList = new ArrayList<>();
    private MainForm mainForm;
    /**
     * Creates new form AssignBonusForm
     */
    public AssignBonusForm() {
        initComponents();  
        getContentPane().setBackground(new java.awt.Color(153,204,255));
        
    }
    
    //creates model for the cboManager

    /**
     *
     */
    public void managerList(){       
        for (Person person : assignBonusFormList){
            if ( person instanceof Manager ){
                cboManager.addItem(person.toString());                
            }
            else if (person instanceof CEO){                                
                cboManager.addItem(person.toString());
            }
        }        
    }
    
    //creates model for the cboSubordinate based on the selection in the cboManager
    public void subordinatesList() {
        cboSubordinate.removeAllItems();
        int count=0;
        String selectedManager = cboManager.getSelectedItem().toString();
        for (Person person : assignBonusFormList) {
            if (person instanceof Manager) {
                if (person.toString().equals(selectedManager)) {
                    Manager manager = (Manager) person;
                    for (ISubordinate subordinate : manager.getSubordinateList()) {
                        if (subordinate instanceof ContractSubordinate) {
                            count++;                            
                        }
                        cboSubordinate.addItem(subordinate.toString());
                        //txtBonus.setText(String.valueOf(count));
                    }
                    if (count == manager.getSubordinateList().size()) {
                        cboSubordinate.removeAllItems();
                        cboSubordinate.addItem("No Salaried subordinates for manager");                        
                    }
                }
            } else if (person instanceof CEO) {
                if (person.toString().equals(selectedManager)) {
                    CEO ceo = (CEO) person;
                    for (ISubordinate subordinate : ceo.getSubordinateList()) {
                        cboSubordinate.addItem(subordinate.toString());
                    }
                }
            }
        }
    }
 

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        msgMessage = new javax.swing.JOptionPane();
        lblHeading = new javax.swing.JLabel();
        cboManager = new javax.swing.JComboBox();
        cboSubordinate = new javax.swing.JComboBox();
        btnAssignBonus = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        txtBonus = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        btnCheckBonus = new javax.swing.JButton();
        btnBack = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblHeading.setBackground(new java.awt.Color(204, 255, 204));
        lblHeading.setFont(new java.awt.Font("Nyala", 1, 48)); // NOI18N
        lblHeading.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblHeading.setText("Assign Bonus");
        lblHeading.setOpaque(true);

        cboManager.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        cboManager.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cboManagerItemStateChanged(evt);
            }
        });
        cboManager.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboManagerActionPerformed(evt);
            }
        });

        cboSubordinate.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        btnAssignBonus.setFont(new java.awt.Font("Nyala", 0, 18)); // NOI18N
        btnAssignBonus.setText("Assign Bonus");
        btnAssignBonus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAssignBonusActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Nyala", 0, 18)); // NOI18N
        jLabel2.setText("Manager:");

        jLabel3.setFont(new java.awt.Font("Nyala", 0, 18)); // NOI18N
        jLabel3.setText("Subordinates List");

        txtBonus.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N

        jLabel4.setFont(new java.awt.Font("Nyala", 0, 18)); // NOI18N
        jLabel4.setText("Bonus:");

        btnCheckBonus.setFont(new java.awt.Font("Nyala", 0, 18)); // NOI18N
        btnCheckBonus.setText("Check Current Bonus");
        btnCheckBonus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckBonusActionPerformed(evt);
            }
        });

        btnBack.setFont(new java.awt.Font("Nyala", 0, 18)); // NOI18N
        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblHeading, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnCheckBonus, javax.swing.GroupLayout.PREFERRED_SIZE, 225, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 150, Short.MAX_VALUE)
                        .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(36, 36, 36))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(jLabel4, javax.swing.GroupLayout.Alignment.LEADING))
                                .addGap(72, 72, 72)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtBonus, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(cboManager, javax.swing.GroupLayout.Alignment.LEADING, 0, 229, Short.MAX_VALUE)
                                        .addComponent(cboSubordinate, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                            .addComponent(btnAssignBonus))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnAssignBonus, btnCheckBonus});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblHeading, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboManager, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cboSubordinate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtBonus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                .addComponent(btnAssignBonus, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnCheckBonus, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(37, 37, 37))
        );

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnAssignBonus, btnCheckBonus});

        layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel4, txtBonus});

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    private void cboManagerItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cboManagerItemStateChanged
        subordinatesList();
    }//GEN-LAST:event_cboManagerItemStateChanged

    //Event handler for the Assign Bonus button
    //including checks for selected item being generic message about no subordinates to display
    //and a check that bonus has been entered in the textbox
    private void btnAssignBonusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAssignBonusActionPerformed

        String message = "";
        SalariedSubordinate currentSubordinate = null;
        //ContractSubordinate contractSubordinate = null;
        Manager currentManager = null;
        CEO currentCEO = null;
        String currentcboSubordinate = cboSubordinate.getSelectedItem().toString();
        String currentcboManager = cboManager.getSelectedItem().toString();
        Double bonusToAssign;

        try {
            if (txtBonus.getText().isEmpty()) {
                //System.out.println("Throwing new exception from Line 236");
                throw new NumberFormatException();
            }
            else {
                bonusToAssign = Double.parseDouble(txtBonus.getText());
            } 

            for (Person person : assignBonusFormList) {
                if (person.toString().equals(currentcboSubordinate)) {
                    if (person instanceof SalariedSubordinate) {
                        currentSubordinate = (SalariedSubordinate) person;
                    }
                }
            }
            
            for (Person person : assignBonusFormList) {
                if (person.toString().equals(currentcboManager)) {                    
                    if (person instanceof Manager) {
                        currentManager = (Manager) person;                        
                        System.out.println("Manager: " + currentManager.toString());
                    } else if (person instanceof CEO) {
                        currentCEO = (CEO) person;
                        System.out.println("Manager: " + currentCEO.toString());
                    }
                }
            }
            
//            System.out.println("Current employee is: " + currentSubordinate.toString());
//            System.out.println("Current manager is: " + currentCEO.toString());
//            System.out.println("Current Bonus for employee is " + String.valueOf(currentSubordinate.getCurrentBonus()));
//            System.out.println("You are trying to assign a bonus of $" + String.valueOf(bonusToAssign));
//            System.out.println("Manager's bonus fund is $" + currentCEO.getTotalManagerBonusFund());
            if (currentSubordinate.getCurrentBonus() > 0){
                message = currentcboSubordinate + " has already got a bonus assigned.";
                System.out.println(message);
                msgMessage.showMessageDialog(this, message, "Announcement", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            } else if (currentManager != null && currentManager.getTotalManagerBonusFund() < bonusToAssign) {
                message = "Manager cannot allocate more than $" + String.valueOf(currentManager.getTotalManagerBonusFund());
                System.out.println(message);
                msgMessage.showMessageDialog(this, message, "Announcement", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            } else if (currentCEO != null && currentCEO.getTotalManagerBonusFund() < bonusToAssign) {
                message = "CEO cannot allocate more than $" + String.valueOf(currentCEO.getTotalManagerBonusFund());
                System.out.println(message);
                msgMessage.showMessageDialog(this, message, "Announcement", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            }
            else {
                for (Person person : assignBonusFormList) {
                    if (person.toString().equals(currentcboSubordinate)) {
                        currentSubordinate.setCurrentBonus(bonusToAssign);
                        person = currentSubordinate;
                        System.out.println(String.valueOf(currentSubordinate.getCurrentBonus()));
                    }
                }
                for (Person person : assignBonusFormList) {
                    if (currentManager != null && person.toString().equals(currentcboManager)){                        
                        currentManager.setTotalManagerBonusFund(currentManager.getTotalManagerBonusFund()- bonusToAssign);
                        person = currentManager;
                        //System.out.println(String.valueOf(currentManager.getTotalManagerBonusFund()));
                    }
                    else if (currentCEO != null && person.toString().equals(currentcboManager)){
                        currentCEO.setTotalManagerBonusFund(currentCEO.getTotalManagerBonusFund()-bonusToAssign);
                        person = currentCEO;
                        //System.out.println(String.valueOf(currentCEO.getTotalManagerBonusFund()));
                    }
                }
                message = "The bonus of $" + String.valueOf(bonusToAssign)+ "0 has been assigned to " + currentcboSubordinate;
                msgMessage.showMessageDialog(this, message, "Announcement", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            }
            
        } catch (NumberFormatException nfe) {
            message = "You haven't specified the bonus.";
            System.out.println(message);
            msgMessage.showMessageDialog(this, message, "No Bonus Assigned", javax.swing.JOptionPane.INFORMATION_MESSAGE);
        } catch (NullPointerException npe){
            message = "You cannot assign a bonus to a contractor. ";
            System.out.println(message);
            msgMessage.showMessageDialog(this, message, "Contract Employee Selected", javax.swing.JOptionPane.INFORMATION_MESSAGE);  
        } 
        catch (Exception e) {
            message = "You cannot assign a bonus to a contractor. ";
            System.out.println(message);
            msgMessage.showMessageDialog(this, message, "Contract Employee Selected", javax.swing.JOptionPane.INFORMATION_MESSAGE);
        }
        
    }//GEN-LAST:event_btnAssignBonusActionPerformed

    //event handler for the Check bonus button that displays the current bonus 
    //for the subordinate selected in the cboSubordinate 
    private void btnCheckBonusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckBonusActionPerformed
               
        for (Person person : assignBonusFormList){
            if (person.toString().equals(cboSubordinate.getSelectedItem())){
                String message;
                SalariedSubordinate subordinate = (SalariedSubordinate)person;
                message = "The bonus of " + subordinate.toString() + " is $" + String.valueOf(subordinate.getCurrentBonus()) + "0.";
                msgMessage.showMessageDialog(this, message, "Announcement", javax.swing.JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnCheckBonusActionPerformed

    //event handler for the Back button that closes the current form and displays the main form
    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
//        mainForm = new MainForm(assignBonusFormList);
//        mainForm.setVisible(true);
        setMainForm(mainForm);
        getMainForm().setVisible(true);
        
        this.setVisible(false);
        
       
    }//GEN-LAST:event_btnBackActionPerformed

    private void cboManagerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboManagerActionPerformed
        
    }//GEN-LAST:event_cboManagerActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AssignBonusForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AssignBonusForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AssignBonusForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AssignBonusForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AssignBonusForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAssignBonus;
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnCheckBonus;
    private javax.swing.JComboBox cboManager;
    private javax.swing.JComboBox cboSubordinate;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel lblHeading;
    private javax.swing.JOptionPane msgMessage;
    private javax.swing.JTextField txtBonus;
    // End of variables declaration//GEN-END:variables

    /**
     * @return the assignBonusFormList
     */
    public ArrayList<Person> getAssignBonusFormList() {
        return assignBonusFormList;
    }

    /**
     * @param assignBonusFormList the assignBonusFormList to set
     */
    public void setAssignBonusFormList(ArrayList<Person> assignBonusFormList) {
        this.assignBonusFormList = assignBonusFormList;
    }

    /**
     * @return the mainForm
     */
    public MainForm getMainForm() {
        return mainForm;
    }

    /**
     * @param mainForm the mainForm to set
     */
    public void setMainForm(MainForm mainForm) {
        this.mainForm = new MainForm(assignBonusFormList);
    }


}
